{
  "swagger": "2.0",
  "info": {
    "description": "Manage users",
    "version": "4.0.0-SNAPSHOT",
    "title": "GV IAM"
  },
  "basePath": "/cxf/gviam",
  "tags": [
    {
      "name": "admin"
    },
    {
      "name": "user"
    },
    {
      "name": "oauth2"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/admin/roles": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get roles",
        "description": "Returns the roles managed by the current logged user",
        "operationId": "getRoles",
        "security": [
          {
            "gviam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "List of managed roles",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/role"
              }
            }
          }
        }
      }
    },
    "/admin/users": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get users",
        "description": "Returns the users managed by the current logged user, with pagination support and filtering by search parameters.",
        "operationId": "getUsers",
        "security": [
          {
            "gviam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "header",
            "name": "Range",
            "description": "to limit number of users to return, giving start and end index, i.e.: _users 0-30_ to retrieve first 30 users, _users 30-60_ for the next 30",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "username",
            "description": "to search by username, * wildcard is supported",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "email",
            "description": "to search by email, * wildcard is supported",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "fullname",
            "description": "to search by fullname, * wildcard is supported",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "role",
            "description": "to search by role name, * wildcard is supported",
            "type": "string",
            "required": false
          },
          {
            "in": "query",
            "name": "enabled",
            "description": "to search by enabling status",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "name": "expired",
            "description": "to search by expiring status",
            "type": "boolean",
            "required": false
          },
          {
            "in": "query",
            "name": "order",
            "description": "to order by supported fields _username, email, fullname, role, enabled, expired_. Repeat for multiple order criteria, use _:reverse_ suffix for reverse order, i.e. _email:reverse_.",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "List of managed users",
            "headers": {
              "Content-Range": {
                "type": "string",
                "description": "Details about range of the returned users list, in the form [start index]-[end index]/[total], i.e.: users 31-60/328"
              }
            },
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/user"
              }
            }
          },
          "416": {
            "description": "Range Not Satisfiable"
          }
        }
      },
      "post": {
        "tags": [
          "admin"
        ],
        "summary": "Create new user",
        "description": "The new user will be created as expired and with the password equal to username",
        "operationId": "createUser",
        "security": [
          {
            "gviam": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "user data without id",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "description": "new user URI, i.e.: /admin/user/99",
                "type": "string"
              }
            }
          },
          "406": {
            "description": "Not Acceptable, invalid username or role name"
          },
          "409": {
            "description": "Conflict, username already in use"
          }
        }
      }
    },
    "/admin/users/{userId}": {
      "get": {
        "tags": [
          "admin"
        ],
        "summary": "Get user",
        "operationId": "getUser",
        "security": [
          {
            "gviam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "id of the user to retrieve",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "retrieved user",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "put": {
        "tags": [
          "admin"
        ],
        "summary": "Edit user",
        "operationId": "editUser",
        "security": [
          {
            "gviam": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "id of the user to update",
            "type": "string",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "description": "updated user data",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "User not found"
          },
          "406": {
            "description": "Invalid username"
          }
        }
      },
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "security": [
          {
            "gviam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "id of the user to delete",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          }
        }
      }
    },
    "/admin/users/{userId}/enabled": {
      "patch": {
        "tags": [
          "admin"
        ],
        "summary": "Disable/enable user",
        "description": "Switchs the enabling status for the specified user",
        "operationId": "switchUserStatus",
        "security": [
          {
            "gviam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "id of the user to enable or disable",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Updated user data",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/admin/users/{userId}/password": {
      "patch": {
        "tags": [
          "admin"
        ],
        "summary": "Password reset",
        "description": "Reset the password for the specified user, setting the new passord equal to username and expiration status to true",
        "operationId": "resetUserPassword",
        "security": [
          {
            "gviam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "description": "id of the user to reset",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "User not found"
          },
          "406": {
            "description": "Invalid username"
          }
        }
      }
    },
    "/authenticate": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Get user profile",
        "description": "Retrieve current logged user",
        "operationId": "authenticate",
        "security": [
          {
            "gviam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "the current logged user",
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Change expired password",
        "description": "Set a new password for an expired user, required API key correspond with [username]:[expired password]:[new password] in Base64",
        "operationId": "resetPassword",
        "security": [
          {
            "gvrenew": []
          }
        ],
        "responses": {
          "200": {
            "description": "the current logged user",
            "schema": {
              "$ref": "#/definitions/user"
            }
          },
          "400": {
            "description": "Bad request, invalid password"
          }
        }
      }
    },
    "/password": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Change password",
        "description": "Change the password of the current logged user",
        "operationId": "changePassword",
        "security": [
          {
            "gviam": []
          }
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "new_password",
            "in": "formData",
            "description": "The new password, Length: min 4, max 28 <br> Valid chars: a-z A-Z 0-9 &#46; &#95; &#64; &amp; &#36; &#35; &#33; &#63; &#45; (no white space)",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "400": {
            "description": "Bad request, invalid password"
          }
        }
      }
    },
    "/token": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get an authentication token",
        "description": "Retrieve a valid authentication token for the current authenticated user ",
        "operationId": "selfCreateAccessToken",
        "security": [
          {
            "gviam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "token_type": {
                  "type": "string",
                  "example": "Bearer"
                },
                "access_token": {
                  "type": "string",
                  "example": "f43a1-12e1-44t5-098a"
                },
                "refresh_token": {
                  "type": "string",
                  "example": "5433-c512-8f81-9999"
                },
                "expires_in": {
                  "type": "integer",
                  "description": "token life in milliseconds",
                  "example": 36000
                },
                "issue_date": {
                  "type": "string",
                  "format": "dateTime",
                  "example": "2017-01-30T12:00:35.0+02:00"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Refresh an authentication token",
        "description": "Refresh an Oauth2 authentication token",
        "operationId": "refreshAccessToken",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "access_token",
            "in": "body",
            "description": "A valid access token with refresh token",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "token_type": {
                  "type": "string",
                  "example": "Bearer"
                },
                "access_token": {
                  "type": "string",
                  "example": "5433-c512-8f81-9999"
                },
                "refresh_token": {
                  "type": "string",
                  "example": "5433-c512-8f81-9999"
                },
                "expires_in": {
                  "type": "integer",
                  "example": 36000
                },
                "issue_date": {
                  "type": "string",
                  "format": "dateTime",
                  "example": "2017-01-30T12:00:35.0+02:00"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "token_type": {
                  "type": "string",
                  "example": "Bearer"
                },
                "access_token": {
                  "type": "string",
                  "example": "5433-c512-8f81-9999"
                },
                "refresh_token": {
                  "type": "string",
                  "example": "5433-c512-8f81-9999"
                },
                "expires_in": {
                  "type": "integer",
                  "example": 36000
                },
                "issue_date": {
                  "type": "string",
                  "format": "dateTime",
                  "example": "2017-01-30T12:00:35.0+02:00"
                }
              }
            }
          }
        }
      }
    },
    "/oauth2/access_token": {
      "post": {
        "tags": [
          "oauth2"
        ],
        "summary": "Get access token",
        "description": "Request creation of an Oauth2 authentication token in compliance with RFC 6749 1.3.3 Resource Owner Password Credentials",
        "operationId": "createAccessToken",
        "security": [
          {
            "gviam": []
          }
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token_type",
            "in": "formData",
            "description": "Token type: Bearer",
            "required": false,
            "type": "string",
            "enum": [
              "Bearer"
            ]
          },
          {
            "name": "grant_type",
            "in": "formData",
            "description": "Grant type: password",
            "required": false,
            "type": "string",
            "enum": [
              "password"
            ]
          },
          {
            "name": "username",
            "in": "formData",
            "description": "Resource owner username",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Resource owner password",
            "required": true,
            "type": "string",
            "format": "password"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "token_type": {
                  "type": "string",
                  "example": "Bearer"
                },
                "access_token": {
                  "type": "string",
                  "example": "f43a1-12e1-44t5-098a"
                },
                "refresh_token": {
                  "type": "string",
                  "example": "5433-c512-8f81-9999"
                },
                "expires_in": {
                  "type": "integer",
                  "description": "token life in milliseconds",
                  "example": 36000
                },
                "issue_date": {
                  "type": "string",
                  "format": "dateTime",
                  "example": "2017-01-30T12:00:35.0+02:00"
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        }
      }
    },
    "/oauth2/refresh_token": {
      "post": {
        "tags": [
          "oauth2"
        ],
        "summary": "Refresh access token",
        "description": "Refresh an Oauth2 authentication token in compliance with RFC 6749 1.3.3 Resource Owner Password Credentials",
        "operationId": "refreshAccessToken",
        "security": [
          {
            "gviam": []
          }
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "grant_type",
            "in": "formData",
            "description": "Grant type: refresh",
            "required": false,
            "type": "string",
            "enum": [
              "refresh"
            ]
          },
          {
            "name": "access_token",
            "in": "formData",
            "required": true,
            "type": "string"
          },
          {
            "name": "refresh_token",
            "in": "formData",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "token_type": {
                  "type": "string",
                  "example": "Bearer"
                },
                "access_token": {
                  "type": "string",
                  "example": "5433-c512-8f81-9999"
                },
                "refresh_token": {
                  "type": "string",
                  "example": "5433-c512-8f81-9999"
                },
                "expires_in": {
                  "type": "integer",
                  "example": 36000
                },
                "issue_date": {
                  "type": "string",
                  "format": "dateTime",
                  "example": "2017-01-30T12:00:35.0+02:00"
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "role": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "minLength": 4,
          "maxLength": 28
        },
        "description": {
          "type": "string"
        }
      }
    },
    "user": {
      "type": "object",
      "required": [
        "username",
        "roles"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "readOnly": true
        },
        "username": {
          "type": "string",
          "minLength": 4,
          "maxLength": 256
        },
        "expired": {
          "type": "boolean"
        },
        "enabled": {
          "type": "boolean"
        },
        "userInfo": {
          "type": "object",
          "properties": {
            "fullname": {
              "type": "string"
            },
            "email": {
              "type": "string",
              "example": "email@example.com"
            }
          }
        },
        "roles": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/role"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "gviam": {
      "type": "basic"
    },
    "gvrenew": {
      "type": "apiKey",
      "in": "header",
      "name": "x-renew-password"
    }
  }
}